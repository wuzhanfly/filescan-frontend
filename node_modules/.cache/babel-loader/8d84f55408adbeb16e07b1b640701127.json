{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js!/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS93dXpoYW5mbHkvZ2l0L2ZpbHNjYW4tZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBnZXRBY3RpdmVNaW5lckNvdW50IGFzIF9nZXRBY3RpdmVNaW5lckNvdW50IH0gZnJvbSAiQC9hcGkvc3RhdHMiOwp2YXIgY2hhcnQ7CmltcG9ydCBkYXlqcyBmcm9tICJkYXlqcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQWN0aXZlTWluZXIiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjb3VudHM6IFtdLAogICAgICBzZWxlY3RvcjogewogICAgICAgIHRpbWVfZGlmZjogMzYwMCwKICAgICAgICByZXBlYXRlX3RpbWU6IDI0LAogICAgICAgIGZvcm1hdDogIk1NTSBEbyBISDptbSIKICAgICAgfSwKICAgICAgbG9hZGluZzogZmFsc2UKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVUaW1lQ2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVUaW1lQ2hhbmdlKHYpIHsKICAgICAgdGhpcy5zZWxlY3RvciA9IHY7CiAgICB9LAogICAgZHJhd0NoYXJ0OiBmdW5jdGlvbiBkcmF3Q2hhcnQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcmF0ZSA9IHRoaXMucmF0ZTsKICAgICAgdmFyIF90aGlzJGNoYXJ0VGhlbWUkYWN0aSA9IHRoaXMuY2hhcnRUaGVtZS5hY3RpdmVNaW5lciwKICAgICAgICAgIGFyZWEgPSBfdGhpcyRjaGFydFRoZW1lJGFjdGkuYXJlYSwKICAgICAgICAgIHNlcmllc0l0ZW0gPSBfdGhpcyRjaGFydFRoZW1lJGFjdGkuc2VyaWVzSXRlbSwKICAgICAgICAgIHNwbGl0TGluZSA9IF90aGlzJGNoYXJ0VGhlbWUkYWN0aS5zcGxpdExpbmU7CiAgICAgIHZhciBjb3VudExhYmVsID0gdGhpcy4kdCgic3RhdHMubWluaW5nLmFjdGl2ZU1pbmVyLmNvdW50Iik7CiAgICAgIHZhciBkYXRhID0gdGhpcy5jb3VudHM7CiAgICAgIHZhciB4RGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGRheWpzLnVuaXgoaXRlbS5uYW1lKS5mb3JtYXQoX3RoaXMuc2VsZWN0b3IuZm9ybWF0KTsKICAgICAgfSk7CiAgICAgIHZhciBjb2xvciA9IHRoaXMudGhlbWUgPT09ICJsaWdodCIgPyAiYmxhY2siIDogIndoaXRlIjsKICAgICAgdmFyIG9wdGlvbiA9IHsKICAgICAgICB4QXhpczogewogICAgICAgICAgdHlwZTogImNhdGVnb3J5IiwKICAgICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSwKICAgICAgICAgIGRhdGE6IHhEYXRhLAogICAgICAgICAgYXhpc0xhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIGZvbnRTaXplOiAxMiAqIHJhdGUsCiAgICAgICAgICAgIG1hcmdpbjogMjAsCiAgICAgICAgICAgIGNvbG9yOiBjb2xvcgogICAgICAgICAgfSwKICAgICAgICAgIGF4aXNUaWNrOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogInZhbHVlIiwKICAgICAgICAgIGF4aXNMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgYXhpc1RpY2s6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgY29sb3I6IGNvbG9yCiAgICAgICAgICB9LAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgICAgIHR5cGU6ICJkYXNoZWQiLAogICAgICAgICAgICAgIGNvbG9yOiBzcGxpdExpbmUKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBzZWxlY3RlZE1vZGU6IGZhbHNlLAogICAgICAgICAgZGF0YTogW3sKICAgICAgICAgICAgbmFtZTogY291bnRMYWJlbAogICAgICAgICAgfV0sCiAgICAgICAgICBpY29uOiAiY2lyY2xlIiwKICAgICAgICAgIGxlZnQ6IDUwICogcmF0ZSwKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBmb250U2l6ZTogMTIgKiByYXRlLAogICAgICAgICAgICBjb2xvcjogY29sb3IKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgbGVmdDogNTAgKiByYXRlLAogICAgICAgICAgcmlnaHQ6IDIwICogcmF0ZQogICAgICAgIH0sCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogImF4aXMiCiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgdHlwZTogImxpbmUiLAogICAgICAgICAgc21vb3RoOiB0cnVlLAogICAgICAgICAgc3ltYm9sOiAibm9uZSIsCiAgICAgICAgICBuYW1lOiBjb3VudExhYmVsLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiBzZXJpZXNJdGVtCiAgICAgICAgICB9LAogICAgICAgICAgYXJlYVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiBhcmVhCiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgY2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CiAgICB9LAogICAgZ2V0QWN0aXZlTWluZXJDb3VudDogZnVuY3Rpb24gZ2V0QWN0aXZlTWluZXJDb3VudCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBfdGhpczIkc2VsZWN0b3IsIHRpbWVfZGlmZiwgcmVwZWF0ZV90aW1lLCByZXMsIGRhdGE7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgICAgX3RoaXMyJHNlbGVjdG9yID0gX3RoaXMyLnNlbGVjdG9yLCB0aW1lX2RpZmYgPSBfdGhpczIkc2VsZWN0b3IudGltZV9kaWZmLCByZXBlYXRlX3RpbWUgPSBfdGhpczIkc2VsZWN0b3IucmVwZWF0ZV90aW1lOwogICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2dldEFjdGl2ZU1pbmVyQ291bnQoewogICAgICAgICAgICAgICAgICB0aW1lX2F0OiBfdGhpczIubm93LAogICAgICAgICAgICAgICAgICB0aW1lX2RpZmY6IHRpbWVfZGlmZiwKICAgICAgICAgICAgICAgICAgcmVwZWF0ZV90aW1lOiByZXBlYXRlX3RpbWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IHJlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLnRpbWVfYXQsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uY291bnQKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX3RoaXMyLmNvdW50cyA9IE9iamVjdC5mcmVlemUoZGF0YS5yZXZlcnNlKCkpOwogICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBfdGhpczIuZHJhd0NoYXJ0KCk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgMTJdXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIGNoYXJ0ID0gdGhpcy4kY2hhcnQuaW5pdCh0aGlzLiRyZWZzLmxpbmUpOwogICAgdGhpcy5nZXRBY3RpdmVNaW5lckNvdW50KCk7CiAgfSwKICB3YXRjaDogewogICAgc2VsZWN0b3I6IGZ1bmN0aW9uIHNlbGVjdG9yKCkgewogICAgICB0aGlzLmdldEFjdGl2ZU1pbmVyQ291bnQoKTsKICAgIH0sCiAgICB0aGVtZTogZnVuY3Rpb24gdGhlbWUoKSB7CiAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["ActiveMiner.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"active-miner bottom-20\">\n    <time-selector title=\"Total Storage Miners\" @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">{{\n        $t(\"stats.mining.activeMiner.title\")\n      }}</span>\n    </time-selector>\n    <div\n      class=\"line-chart\"\n      ref=\"line\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    ></div>\n  </div>\n</template>\n<script>\nimport { getActiveMinerCount } from \"@/api/stats\";\nlet chart;\nimport dayjs from \"dayjs\";\nexport default {\n  name: \"ActiveMiner\",\n  data() {\n    return {\n      counts: [],\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      loading: false\n    };\n  },\n  methods: {\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    drawChart() {\n      const rate = this.rate;\n      const { area, seriesItem, splitLine } = this.chartTheme.activeMiner;\n      const countLabel = this.$t(\"stats.mining.activeMiner.count\");\n      const data = this.counts;\n      const xData = data.map(item => {\n        return dayjs.unix(item.name).format(this.selector.format);\n      });\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const option = {\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            margin: 20,\n            color\n          },\n          axisTick: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            color\n          },\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLine\n            }\n          }\n        },\n        legend: {\n          selectedMode: false,\n          data: [{ name: countLabel }],\n          icon: \"circle\",\n          left: 50 * rate,\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          show: false,\n          left: 50 * rate,\n          right: 20 * rate\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        series: [\n          {\n            data: data,\n            type: \"line\",\n            smooth: true,\n            symbol: \"none\",\n            name: countLabel,\n            itemStyle: {\n              color: seriesItem\n            },\n            areaStyle: {\n              color: area\n            }\n          }\n        ]\n      };\n      chart.setOption(option);\n    },\n    async getActiveMinerCount() {\n      try {\n        const { time_diff, repeate_time } = this.selector;\n        this.loading = true;\n        let res = await getActiveMinerCount({\n          time_at: this.now,\n          time_diff,\n          repeate_time\n        });\n        const data = res.map(item => {\n          return {\n            name: item.time_at,\n            value: item.count\n          };\n        });\n        this.counts = Object.freeze(data.reverse());\n        this.loading = false;\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.line);\n    this.getActiveMinerCount();\n  },\n  watch: {\n    selector() {\n      this.getActiveMinerCount();\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.active-miner {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  box-shadow: 0px 1px 7px 9px rgba(0, 0, 0, 0.03);\n  .line-chart {\n    height: 500px;\n  }\n  .title {\n    font-weight: bold;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  @media (max-width: 768px) {\n    .line-chart {\n      height: 200px;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/views/stats/components/mining"}]}