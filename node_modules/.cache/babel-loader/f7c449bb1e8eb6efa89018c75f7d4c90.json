{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js!/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/metrics/FilecoinBlockChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/metrics/FilecoinBlockChart.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS93dXpoYW5mbHkvZ2l0L2ZpbHNjYW4tZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBnZXRCbG9ja1Jld2FyZCBhcyBfZ2V0QmxvY2tSZXdhcmQgfSBmcm9tICJAL2FwaS90b2tlbiI7CmltcG9ydCBkYXlqcyBmcm9tICJkYXlqcyI7CnZhciBjaGFydDsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJGaWxlY29pbkJsb2NrQ2hhcnQiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkYXRhTGlzdDogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBkcmF3Q2hhcnQ6IGZ1bmN0aW9uIGRyYXdDaGFydCgpIHsKICAgICAgdmFyIG51bWJlckNvbnZlcnNpb24gPSB0aGlzLm51bWJlckNvbnZlcnNpb247CiAgICAgIHZhciByYXRlID0gdGhpcy5yYXRlOwogICAgICB2YXIgX3RoaXMkY2hhcnRUaGVtZSRmaWxlID0gdGhpcy5jaGFydFRoZW1lLmZpbGVjb2luLAogICAgICAgICAgYXJlYSA9IF90aGlzJGNoYXJ0VGhlbWUkZmlsZS5hcmVhLAogICAgICAgICAgc2VyaWVzSXRlbSA9IF90aGlzJGNoYXJ0VGhlbWUkZmlsZS5zZXJpZXNJdGVtLAogICAgICAgICAgc3BsaXRMaW5lID0gX3RoaXMkY2hhcnRUaGVtZSRmaWxlLnNwbGl0TGluZTsKICAgICAgdmFyIHJld2FyZCA9IHRoaXMuJHQoImNoYXJ0LmZpbGVjb2luIik7CiAgICAgIHZhciBkYXRhTGlzdCA9IHRoaXMuZGF0YUxpc3Q7CiAgICAgIHZhciB4RGF0YSA9IGRhdGFMaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBkYXlqcy51bml4KGl0ZW0ubmFtZSkuZm9ybWF0KCJNTU0gWVlZWSIpOwogICAgICB9KTsKICAgICAgdmFyIGNvbG9yID0gdGhpcy50aGVtZSA9PT0gImxpZ2h0IiA/ICJibGFjayIgOiAid2hpdGUiOwogICAgICB2YXIgb3B0aW9uID0gewogICAgICAgIGxlZ2VuZDogewogICAgICAgICAgbGVmdDogMzAgKiByYXRlLAogICAgICAgICAgc2VsZWN0ZWRNb2RlOiBmYWxzZSwKICAgICAgICAgIGRhdGE6IFt7CiAgICAgICAgICAgIG5hbWU6IHJld2FyZCwKICAgICAgICAgICAgaWNvbjogImNpcmNsZSIKICAgICAgICAgIH1dLAogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGZvbnRTaXplOiAxMiAqIHJhdGUsCiAgICAgICAgICAgIGNvbG9yOiBjb2xvcgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgbGVmdDogNTAgKiByYXRlCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAiYXhpcyIKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAiY2F0ZWdvcnkiLAogICAgICAgICAgYm91bmRhcnlHYXA6IGZhbHNlLAogICAgICAgICAgZGF0YTogeERhdGEsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgICBjb2xvcjogY29sb3IKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWFyZ2luOiAyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIHR5cGU6ICJ2YWx1ZSIsCiAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgICAgdHlwZTogImRhc2hlZCIsCiAgICAgICAgICAgICAgY29sb3I6IHNwbGl0TGluZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIGZvcm1hdHRlcih2KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bWJlckNvbnZlcnNpb24odik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgIGZvbnRTaXplOiAxMiAqIHJhdGUsCiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHNlcmllczogW3sKICAgICAgICAgIGRhdGE6IGRhdGFMaXN0LAogICAgICAgICAgdHlwZTogImxpbmUiLAogICAgICAgICAgc21vb3RoOiB0cnVlLAogICAgICAgICAgbmFtZTogcmV3YXJkLAogICAgICAgICAgc3ltYm9sOiAibm9uZSIsCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6IHNlcmllc0l0ZW0KICAgICAgICAgIH0sCiAgICAgICAgICBhcmVhU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6IGFyZWEKICAgICAgICAgIH0KICAgICAgICB9XQogICAgICB9OwogICAgICBjaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICBnZXRCbG9ja1Jld2FyZDogZnVuY3Rpb24gZ2V0QmxvY2tSZXdhcmQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByZXMsIGRhdGFMaXN0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0QmxvY2tSZXdhcmQoewogICAgICAgICAgICAgICAgICB0aW1lX2RpZmY6IDg2NDAwICogMzAsCiAgICAgICAgICAgICAgICAgIHJlcGVhdGU6IDEyICogMjgKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0YUxpc3QgPSByZXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS50aW1lLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLmJsb2NrX3Jld2FyZHMKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX3RoaXMuZGF0YUxpc3QgPSBPYmplY3QuZnJlZXplKGRhdGFMaXN0KTsKCiAgICAgICAgICAgICAgICBfdGhpcy5kcmF3Q2hhcnQoKTsKCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDEwXV0pOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBjaGFydCA9IHRoaXMuJGNoYXJ0LmluaXQodGhpcy4kcmVmcy5jaGFydCk7CiAgICB0aGlzLmdldEJsb2NrUmV3YXJkKCk7CiAgfSwKICB3YXRjaDogewogICAgdGhlbWU6IGZ1bmN0aW9uIHRoZW1lKCkgewogICAgICB0aGlzLmRyYXdDaGFydCgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["FilecoinBlockChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"filecoin-block-chart\">\n    <div class=\"title\">{{ $t(\"stats.metrics.filecoin.title\") }}</div>\n    <div ref=\"chart\" class=\"chart-con\"></div>\n  </div>\n</template>\n<script>\nimport { getBlockReward } from \"@/api/token\";\nimport dayjs from \"dayjs\";\nlet chart;\nexport default {\n  name: \"FilecoinBlockChart\",\n  data() {\n    return {\n      dataList: []\n    };\n  },\n  methods: {\n    drawChart() {\n      const numberConversion = this.numberConversion;\n      const rate = this.rate;\n      const { area, seriesItem, splitLine } = this.chartTheme.filecoin;\n      const reward = this.$t(\"chart.filecoin\");\n      const dataList = this.dataList;\n      const xData = dataList.map(item => {\n        return dayjs.unix(item.name).format(\"MMM YYYY\");\n      });\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const option = {\n        legend: {\n          left: 30 * rate,\n          selectedMode: false,\n          data: [\n            {\n              name: reward,\n              icon: \"circle\"\n            }\n          ],\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          left: 50 * rate\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            textStyle: {\n              fontSize: 12 * rate,\n              color\n            },\n            margin: 20\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLine\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            formatter(v) {\n              return numberConversion(v);\n            },\n            textStyle: {\n              fontSize: 12 * rate,\n              color\n            }\n          }\n        },\n        series: [\n          {\n            data: dataList,\n            type: \"line\",\n            smooth: true,\n            name: reward,\n            symbol: \"none\",\n            itemStyle: {\n              color: seriesItem\n            },\n            areaStyle: {\n              color: area\n            }\n          }\n        ]\n      };\n      chart.setOption(option);\n    },\n    async getBlockReward() {\n      try {\n        this.loading = true;\n        let res = await getBlockReward({\n          time_diff: 86400 * 30,\n          repeate: 12 * 28\n        });\n        const dataList = res.map(item => {\n          return {\n            name: item.time,\n            value: item.block_rewards\n          };\n        });\n        this.dataList = Object.freeze(dataList);\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.chart);\n    this.getBlockReward();\n  },\n  watch: {\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.filecoin-block-chart {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  box-shadow: 0px 1px 7px 9px rgba(0, 0, 0, 0.03);\n  .title {\n    height: 60px;\n    line-height: 60px;\n    padding-left: 30px;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  .chart-con {\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    .chart-con {\n      height: 200px;\n    }\n    margin: 10px 0;\n    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.03);\n    border-radius: 10px;\n    .title {\n      padding: 3.3vw 0 0 3.3vw;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/views/stats/components/metrics"}]}