{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js!/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ProvenPower.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ProvenPower.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ProvenPower.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"proven-power bottom-20\">\n    <time-selector @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">\n        {{ $t(\"stats.mining.provenPower.title\") }}\n      </span>\n    </time-selector>\n    <div\n      class=\"chart-con\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    >\n      <div class=\"line-chart-con\">\n        <div class=\"line-chart\" ref=\"line\"></div>\n      </div>\n      <div class=\"pie-chart\" ref=\"pie\"></div>\n    </div>\n  </div>\n</template>\n<script>\nlet lineChart, pieChart;\nimport { getTopMiner, getMinerPowerByTime } from \"@/api/stats\";\nimport dayjs from \"dayjs\";\nexport default {\n  name: \"ProvenPower\",\n  data() {\n    return {\n      series: [],\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      loading: false,\n      unit: \"\"\n    };\n  },\n  mounted() {\n    lineChart = this.$chart.init(this.$refs.line);\n    pieChart = this.$chart.init(this.$refs.pie);\n    lineChart.on(\"updateAxisPointer\", e => {\n      if (e.axesInfo.length) {\n        const v = this.series.map(item => {\n          return {\n            name: item.name,\n            value: item.data[e.dataIndex].value,\n            itemStyle: item.itemStyle\n          };\n        });\n        pieChart.setOption({\n          series: {\n            data: v\n          }\n        });\n      }\n    });\n  },\n  methods: {\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    drawChart() {\n      const unitConversion = this.unitConversion;\n      const rate = this.rate;\n      const first = this.series;\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const splitLineColor = this.chartTheme.provenPower.splitLine;\n      const xData = first[0].data.map(item =>\n        dayjs.unix(item.time).format(this.selector.format)\n      );\n      const legendData = this.series.map(item => {\n        return {\n          name: item.name,\n          icon: \"rect\"\n        };\n      });\n      const pieData = first.map(item => {\n        return {\n          name: item.name,\n          value: item.data[item.data.length - 1].value,\n          itemStyle: item.itemStyle\n        };\n      });\n      const lineOption = {\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            textStyle: {\n              fontSize: 12 * rate,\n              color\n            },\n            margin: 20\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLineColor\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            formatter(v) {\n              return unitConversion(v, 2);\n            },\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          left: 80 * rate,\n          right: 20\n        },\n        legend: {\n          selectedMode: false,\n          legendData,\n          icon: \"circle\",\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          formatter(yValues) {\n            let str = `<div>${yValues[0].axisValueLabel}</div>`;\n            yValues.forEach(item => {\n              str += `<div>${item.marker}${item.seriesName}:${unitConversion(\n                item.data.value,\n                2\n              )}</div>`;\n            });\n            return str;\n          }\n        },\n        series: this.series\n      };\n      const pieOption = {\n        tooltip: {\n          trigger: \"item\",\n          formatter(p) {\n            const { name, value, percent } = p;\n            return `${name}: ${percent}%(${unitConversion(value, 2)})`;\n          }\n        },\n        series: [\n          {\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"55%\"],\n            data: pieData,\n            label: {\n              formatter: \"{b}:{d}%\",\n              show: true\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\"\n              }\n            },\n            grid: {\n              right: 20,\n              left: 20\n            }\n          }\n        ]\n      };\n      lineChart.setOption(lineOption);\n      pieChart.setOption(pieOption);\n    },\n    async getTopMiner() {\n      try {\n        this.loading = true;\n        const colors = this.chartTheme.provenPower.items;\n        const { time_diff, repeate_time } = this.selector;\n        let res = await getTopMiner({\n          time_at: this.now,\n          offset: 0,\n          limit: 6\n        });\n        const miners = res.miners.map(item => {\n          return item.address;\n        });\n        const powerRes = await getMinerPowerByTime({\n          time_at: this.now,\n          time_diff,\n          repeate_time,\n          miners: miners\n        });\n        this.loading = false;\n        const series = Object.entries(powerRes).map((item, index) => {\n          const [key, value] = item;\n          value.data.reverse();\n          return {\n            data: value.data.map(item => {\n              return {\n                value: parseFloat(item.miner_states.power),\n                time: item.at_time\n              };\n            }),\n            name: key,\n            type: \"line\",\n            stack: \"power\",\n            symbol: \"none\",\n            smooth: true,\n            itemStyle: {\n              color: colors[index].item\n            },\n            areaStyle: {\n              color: colors[index].area\n            }\n          };\n        });\n        this.series = Object.freeze(series);\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  watch: {\n    selector: {\n      handler() {\n        this.getTopMiner();\n      },\n      immediate: true\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.proven-power {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  .title {\n    font-weight: bold;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  .chart-con {\n    display: flex;\n  }\n  .line-chart-con {\n    width: 70%;\n    height: 600px;\n    .line-chart {\n      width: 100%;\n      height: 100%;\n    }\n    .chart-title {\n      display: flex;\n      height: 60px;\n      span {\n        line-height: 60px;\n        margin-right: auto;\n      }\n    }\n  }\n  .pie-chart {\n    width: 30%;\n    margin-left: 20px;\n    height: 600px;\n  }\n  @media (max-width: 768px) {\n    .chart-con {\n      display: block;\n      .line-chart-con {\n        width: 100%;\n        height: auto;\n        .line-chart {\n          height: 200px;\n        }\n      }\n      .pie-chart {\n        width: 100%;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/views/stats/components/mining"}]}