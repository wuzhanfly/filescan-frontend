{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/Map.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldE1hcERhdGEgfSBmcm9tICJAL2FwaS9zdGF0cyI7CmxldCBjaGFydDsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJOb2RlTWFwIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIHBvaW50czogW10sCiAgICAgIHRpbWVyOiBudWxsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZHJhd05vZGVNYXAoem9vbSkgewogICAgICBjb25zdCBkYXRhID0gdGhpcy5wb2ludHM7CiAgICAgIGNvbnN0IHsgYmcsIHNjYXR0ZXIsIGdlbywgdG9vbHRpcCB9ID0gdGhpcy5jaGFydFRoZW1lLm1hcDsKICAgICAgY29uc3QgeyBpdGVtLCBib3JkZXIsIGVtcGhhc2lzIH0gPSBnZW87CiAgICAgIGxldCBzeW1ib2xTaXplID0gNDsKICAgICAgaWYgKHpvb20gPiA1MCkgewogICAgICAgIHN5bWJvbFNpemUgPSAxMDsKICAgICAgfQogICAgICBjb25zdCB2bSA9IHRoaXM7CiAgICAgIHZhciBzZXJpZXMgPSBbXTsKICAgICAgc2VyaWVzLnB1c2goewogICAgICAgIHR5cGU6ICJzY2F0dGVyIiwKICAgICAgICBjb29yZGluYXRlU3lzdGVtOiAiZ2VvIiwKICAgICAgICB6bGV2ZWw6IDIsCiAgICAgICAgbGFiZWw6IHsKICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBibGVuZE1vZGU6ICJsaWdodGVyIiwKICAgICAgICBzeW1ib2w6ICJjaXJjbGUiLAogICAgICAgIHN5bWJvbFNpemU6IHN5bWJvbFNpemUsCiAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICAgIGNvbG9yOiBzY2F0dGVyCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgIGxhcmdlOiB0cnVlCiAgICAgIH0pOwogICAgICBzZXJpZXNbMF0uZGF0YSA9IHNlcmllc1swXS5kYXRhLnNsaWNlKDAsIDMwMDApOwogICAgICBjaGFydC5zZXRPcHRpb24oewogICAgICAgIGJhY2tncm91bmRDb2xvcjogYmcsCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogIml0ZW0iLAogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0b29sdGlwLAogICAgICAgICAgc2hvd0RlbGF5OiAwLAogICAgICAgICAgaGlkZURlbGF5OiAzMDAsCiAgICAgICAgICBlbnRlcmFibGU6IHRydWUsCiAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgICAgICBjb25zdCB7IG5hbWUsIHBpZCwgaXAgfSA9IHBhcmFtcy5kYXRhOwogICAgICAgICAgICByZXR1cm4gdm0uJHQoImNoYXJ0Lm1hcCIsIHsgbmFtZSwgcGlkLCBpcCB9KTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGdlbzogewogICAgICAgICAgbWFwOiAid29ybGQiLAogICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgcm9hbTogdHJ1ZSwKICAgICAgICAgIGxheW91dENlbnRlcjogWyI1MCUiLCAiNTAlIl0sCiAgICAgICAgICBsYXlvdXRTaXplOiAiMTgwJSIsCiAgICAgICAgICBzY2FsZUxpbWl0OiB7CiAgICAgICAgICAgIG1pbjogMSwKICAgICAgICAgICAgbWF4OiAxNTAKICAgICAgICAgIH0sCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgY29sb3I6IGl0ZW0sCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlcgogICAgICAgICAgICB9LAogICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgIGNvbG9yOiBlbXBoYXNpcwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYW5pbWF0aW9uOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZSwKICAgICAgICBzZXJpZXM6IHNlcmllcwogICAgICB9KTsKICAgIH0sCiAgICBnZXRSYW5kb20oKSB7CiAgICAgIGNvbnN0IHBpID0gTWF0aC5QSTsKICAgICAgbGV0IHRoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgKiBwaTsKICAgICAgbGV0IHJhZGl1cyA9IDIwICogTWF0aC5yYW5kb20oKTsKICAgICAgY29uc3QgeCA9IHJhZGl1cyAqIE1hdGguc2luKHRoZXRhKTsKICAgICAgY29uc3QgeSA9IHJhZGl1cyAqIE1hdGguY29zKHRoZXRhKTsKICAgICAgcmV0dXJuIHsKICAgICAgICB4OiB4IC8gMTAwLAogICAgICAgIHk6IHkgLyAxMDAKICAgICAgfTsKICAgIH0sCiAgICBhc3luYyBnZXRNYXBEYXRhKCkgewogICAgICB0cnkgewogICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGdldE1hcERhdGEoKTsKICAgICAgICBjb25zdCBwb2ludHMgPSBbXTsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICByZXMucGVlcl9wb2ludC5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgY29uc3QgbGVuID0gaXRlbS5wZWVycy5sZW5ndGg7CiAgICAgICAgICBpdGVtLnBlZXJzLmZvckVhY2gocGVlciA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5nZXRSYW5kb20oKTsKICAgICAgICAgICAgY29uc3QgdmFsdWUgPQogICAgICAgICAgICAgIGxlbiA9PT0gMQogICAgICAgICAgICAgICAgPyBbaXRlbS5sb25naXR1ZGUsIGl0ZW0ubGF0aXR1ZGUsIDEwXQogICAgICAgICAgICAgICAgOiBbaXRlbS5sb25naXR1ZGUgKyB4LCBpdGVtLmxhdGl0dWRlICsgeSwgMTBdOwogICAgICAgICAgICBwb2ludHMucHVzaCh7CiAgICAgICAgICAgICAgbmFtZTogaXRlbS5sb2NhdGlvbl9lbiwKICAgICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgICBwaWQ6IHBlZXIucGVlcl9pZCwKICAgICAgICAgICAgICBpcDogcGVlci5pcAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHRoaXMucG9pbnRzID0gT2JqZWN0LmZyZWV6ZShwb2ludHMpOwogICAgICAgIHRoaXMuZHJhd05vZGVNYXAoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgY2hhcnQgPSB0aGlzLiRjaGFydC5pbml0KHRoaXMuJHJlZnMuY2hhcnQpOwogICAgY2hhcnQub24oImdlb3JvYW0iLCAoKSA9PiB7CiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICAgICAgY29uc3Qgem9vbSA9IGNoYXJ0LmdldE9wdGlvbigpLmdlb1swXS56b29tOwogICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdGhpcy5kcmF3Tm9kZU1hcCh6b29tKTsKICAgICAgfSwgMTAwKTsKICAgIH0pOwogICAgdGhpcy5nZXRNYXBEYXRhKCk7CiAgfSwKICB3YXRjaDogewogICAgdGhlbWUoKSB7CiAgICAgIHRoaXMuZHJhd05vZGVNYXAoKTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappingsfile":"Map.vue","sourceRoot":"src/views/stats","sourcesContent":["<template>\n  <div class=\"node-map bottom-10\">\n    <div\n      ref=\"chart\"\n      class=\"chart-con\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    ></div>\n  </div>\n</template>\n<script>\nimport { getMapData } from \"@/api/stats\";\nlet chart;\nexport default {\n  name: \"NodeMap\",\n  data() {\n    return {\n      loading: false,\n      points: [],\n      timer: null\n    };\n  },\n  methods: {\n    drawNodeMap(zoom) {\n      const data = this.points;\n      const { bg, scatter, geo, tooltip } = this.chartTheme.map;\n      const { item, border, emphasis } = geo;\n      let symbolSize = 4;\n      if (zoom > 50) {\n        symbolSize = 10;\n      }\n      const vm = this;\n      var series = [];\n      series.push({\n        type: \"scatter\",\n        coordinateSystem: \"geo\",\n        zlevel: 2,\n        label: {\n          normal: {\n            show: false\n          },\n          emphasis: {\n            show: false\n          }\n        },\n        blendMode: \"lighter\",\n        symbol: \"circle\",\n        symbolSize: symbolSize,\n        itemStyle: {\n          normal: {\n            show: false,\n            color: scatter\n          }\n        },\n        data: data,\n        large: true\n      });\n      series[0].data = series[0].data.slice(0, 3000);\n      chart.setOption({\n        backgroundColor: bg,\n        tooltip: {\n          trigger: \"item\",\n          backgroundColor: tooltip,\n          showDelay: 0,\n          hideDelay: 300,\n          enterable: true,\n          formatter: function(params) {\n            const { name, pid, ip } = params.data;\n            return vm.$t(\"chart.map\", { name, pid, ip });\n          }\n        },\n        geo: {\n          map: \"world\",\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          roam: true,\n          layoutCenter: [\"50%\", \"50%\"],\n          layoutSize: \"180%\",\n          scaleLimit: {\n            min: 1,\n            max: 150\n          },\n          itemStyle: {\n            normal: {\n              color: item,\n              borderColor: border\n            },\n            emphasis: {\n              color: emphasis\n            }\n          },\n          animation: false\n        },\n        animation: false,\n        series: series\n      });\n    },\n    getRandom() {\n      const pi = Math.PI;\n      let theta = Math.random() * 2 * pi;\n      let radius = 20 * Math.random();\n      const x = radius * Math.sin(theta);\n      const y = radius * Math.cos(theta);\n      return {\n        x: x / 100,\n        y: y / 100\n      };\n    },\n    async getMapData() {\n      try {\n        this.loading = true;\n        let res = await getMapData();\n        const points = [];\n        this.loading = false;\n        res.peer_point.forEach(item => {\n          const len = item.peers.length;\n          item.peers.forEach(peer => {\n            const { x, y } = this.getRandom();\n            const value =\n              len === 1\n                ? [item.longitude, item.latitude, 10]\n                : [item.longitude + x, item.latitude + y, 10];\n            points.push({\n              name: item.location_en,\n              value,\n              pid: peer.peer_id,\n              ip: peer.ip\n            });\n          });\n        });\n        this.points = Object.freeze(points);\n        this.drawNodeMap();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.chart);\n    chart.on(\"georoam\", () => {\n      clearTimeout(this.timer);\n      const zoom = chart.getOption().geo[0].zoom;\n      this.timer = setTimeout(() => {\n        this.drawNodeMap(zoom);\n      }, 100);\n    });\n    this.getMapData();\n  },\n  watch: {\n    theme() {\n      this.drawNodeMap();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.node-map {\n  height: calc(100vh - 200px);\n  position: relative;\n  .chart-con {\n    width: 100%;\n    height: 100%;\n    background: var(--board-bg-color);\n  }\n  @media (max-width: 768px) {\n    .chart-con {\n    }\n  }\n}\n</style>\n"]}]}