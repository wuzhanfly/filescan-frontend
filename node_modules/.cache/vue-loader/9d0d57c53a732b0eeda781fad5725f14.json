{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ProvenPower.vue?vue&type=style&index=0&id=043bc873&lang=scss&scoped=true&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ProvenPower.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucHJvdmVuLXBvd2VyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1ib2FyZC1iZy1jb2xvcik7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIC50aXRsZSB7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGZvbnQtc2l6ZTogMjBweDsKICAgIGNvbG9yOiB2YXIoLS1tYWluLXRleHQtY29sb3IpOwogIH0KICAuY2hhcnQtY29uIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgfQogIC5saW5lLWNoYXJ0LWNvbiB7CiAgICB3aWR0aDogNzAlOwogICAgaGVpZ2h0OiA2MDBweDsKICAgIC5saW5lLWNoYXJ0IHsKICAgICAgd2lkdGg6IDEwMCU7CiAgICAgIGhlaWdodDogMTAwJTsKICAgIH0KICAgIC5jaGFydC10aXRsZSB7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGhlaWdodDogNjBweDsKICAgICAgc3BhbiB7CiAgICAgICAgbGluZS1oZWlnaHQ6IDYwcHg7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvOwogICAgICB9CiAgICB9CiAgfQogIC5waWUtY2hhcnQgewogICAgd2lkdGg6IDMwJTsKICAgIG1hcmdpbi1sZWZ0OiAyMHB4OwogICAgaGVpZ2h0OiA2MDBweDsKICB9CiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7CiAgICAuY2hhcnQtY29uIHsKICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgIC5saW5lLWNoYXJ0LWNvbiB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgICAgIC5saW5lLWNoYXJ0IHsKICAgICAgICAgIGhlaWdodDogMjAwcHg7CiAgICAgICAgfQogICAgICB9CiAgICAgIC5waWUtY2hhcnQgewogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["ProvenPower.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProvenPower.vue","sourceRoot":"src/views/stats/components/mining","sourcesContent":["<template>\n  <div class=\"proven-power bottom-20\">\n    <time-selector @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">\n        {{ $t(\"stats.mining.provenPower.title\") }}\n      </span>\n    </time-selector>\n    <div\n      class=\"chart-con\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    >\n      <div class=\"line-chart-con\">\n        <div class=\"line-chart\" ref=\"line\"></div>\n      </div>\n      <div class=\"pie-chart\" ref=\"pie\"></div>\n    </div>\n  </div>\n</template>\n<script>\nlet lineChart, pieChart;\nimport { getTopMiner, getMinerPowerByTime } from \"@/api/stats\";\nimport dayjs from \"dayjs\";\nexport default {\n  name: \"ProvenPower\",\n  data() {\n    return {\n      series: [],\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      loading: false,\n      unit: \"\"\n    };\n  },\n  mounted() {\n    lineChart = this.$chart.init(this.$refs.line);\n    pieChart = this.$chart.init(this.$refs.pie);\n    lineChart.on(\"updateAxisPointer\", e => {\n      if (e.axesInfo.length) {\n        const v = this.series.map(item => {\n          return {\n            name: item.name,\n            value: item.data[e.dataIndex].value,\n            itemStyle: item.itemStyle\n          };\n        });\n        pieChart.setOption({\n          series: {\n            data: v\n          }\n        });\n      }\n    });\n  },\n  methods: {\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    drawChart() {\n      const unitConversion = this.unitConversion;\n      const rate = this.rate;\n      const first = this.series;\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const splitLineColor = this.chartTheme.provenPower.splitLine;\n      const xData = first[0].data.map(item =>\n        dayjs.unix(item.time).format(this.selector.format)\n      );\n      const legendData = this.series.map(item => {\n        return {\n          name: item.name,\n          icon: \"rect\"\n        };\n      });\n      const pieData = first.map(item => {\n        return {\n          name: item.name,\n          value: item.data[item.data.length - 1].value,\n          itemStyle: item.itemStyle\n        };\n      });\n      const lineOption = {\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            textStyle: {\n              fontSize: 12 * rate,\n              color\n            },\n            margin: 20\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLineColor\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            formatter(v) {\n              return unitConversion(v, 2);\n            },\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          left: 80 * rate,\n          right: 20\n        },\n        legend: {\n          selectedMode: false,\n          legendData,\n          icon: \"circle\",\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          formatter(yValues) {\n            let str = `<div>${yValues[0].axisValueLabel}</div>`;\n            yValues.forEach(item => {\n              str += `<div>${item.marker}${item.seriesName}:${unitConversion(\n                item.data.value,\n                2\n              )}</div>`;\n            });\n            return str;\n          }\n        },\n        series: this.series\n      };\n      const pieOption = {\n        tooltip: {\n          trigger: \"item\",\n          formatter(p) {\n            const { name, value, percent } = p;\n            return `${name}: ${percent}%(${unitConversion(value, 2)})`;\n          }\n        },\n        series: [\n          {\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"55%\"],\n            data: pieData,\n            label: {\n              formatter: \"{b}:{d}%\",\n              show: true\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\"\n              }\n            },\n            grid: {\n              right: 20,\n              left: 20\n            }\n          }\n        ]\n      };\n      lineChart.setOption(lineOption);\n      pieChart.setOption(pieOption);\n    },\n    async getTopMiner() {\n      try {\n        this.loading = true;\n        const colors = this.chartTheme.provenPower.items;\n        const { time_diff, repeate_time } = this.selector;\n        let res = await getTopMiner({\n          time_at: this.now,\n          offset: 0,\n          limit: 6\n        });\n        const miners = res.miners.map(item => {\n          return item.address;\n        });\n        const powerRes = await getMinerPowerByTime({\n          time_at: this.now,\n          time_diff,\n          repeate_time,\n          miners: miners\n        });\n        this.loading = false;\n        const series = Object.entries(powerRes).map((item, index) => {\n          const [key, value] = item;\n          value.data.reverse();\n          return {\n            data: value.data.map(item => {\n              return {\n                value: parseFloat(item.miner_states.power),\n                time: item.at_time\n              };\n            }),\n            name: key,\n            type: \"line\",\n            stack: \"power\",\n            symbol: \"none\",\n            smooth: true,\n            itemStyle: {\n              color: colors[index].item\n            },\n            areaStyle: {\n              color: colors[index].area\n            }\n          };\n        });\n        this.series = Object.freeze(series);\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  watch: {\n    selector: {\n      handler() {\n        this.getTopMiner();\n      },\n      immediate: true\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.proven-power {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  .title {\n    font-weight: bold;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  .chart-con {\n    display: flex;\n  }\n  .line-chart-con {\n    width: 70%;\n    height: 600px;\n    .line-chart {\n      width: 100%;\n      height: 100%;\n    }\n    .chart-title {\n      display: flex;\n      height: 60px;\n      span {\n        line-height: 60px;\n        margin-right: auto;\n      }\n    }\n  }\n  .pie-chart {\n    width: 30%;\n    margin-left: 20px;\n    height: 600px;\n  }\n  @media (max-width: 768px) {\n    .chart-con {\n      display: block;\n      .line-chart-con {\n        width: 100%;\n        height: auto;\n        .line-chart {\n          height: 200px;\n        }\n      }\n      .pie-chart {\n        width: 100%;\n      }\n    }\n  }\n}\n</style>\n"]}]}