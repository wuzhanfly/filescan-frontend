{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/metrics/BlockRewardChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/metrics/BlockRewardChart.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBkYXlqcyBmcm9tICJkYXlqcyI7CmltcG9ydCB7IGdldEN1bXVsYXRpdmVCbG9jayB9IGZyb20gIkAvYXBpL3Rva2VuIjsKbGV0IGNoYXJ0OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkJsb2NrUmV3YXJkQ2hhcnQiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgc2VsZWN0b3I6IHsKICAgICAgICB0aW1lX2RpZmY6IDM2MDAsCiAgICAgICAgcmVwZWF0ZV90aW1lOiAyNCwKICAgICAgICBmb3JtYXQ6ICJNTU0gRG8gSEg6bW0iCiAgICAgIH0sCiAgICAgIHJld2FyZExpc3Q6IFtdLAogICAgICBjb3VudExpc3Q6IFtdCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZHJhd0NoYXJ0KCkgewogICAgICBjb25zdCByYXRlID0gdGhpcy5yYXRlOwogICAgICBjb25zdCBudW1iZXJDb252ZXJzaW9uID0gdGhpcy5udW1iZXJDb252ZXJzaW9uOwogICAgICBjb25zdCB7IHNwbGl0TGluZSwgc2VyaWVzSXRlbSB9ID0gdGhpcy5jaGFydFRoZW1lLmJsb2NrUmV3YXJkOwogICAgICBjb25zdCBbbWluZXIsIHJld2FyZF0gPSB0aGlzLiR0KCJjaGFydC5ibG9ja1Jld2FyZCIpOwogICAgICBjb25zdCB7IHJld2FyZExpc3QsIGNvdW50TGlzdCB9ID0gdGhpczsKICAgICAgY29uc3QgeERhdGEgPSByZXdhcmRMaXN0Lm1hcChpdGVtID0+IHsKICAgICAgICByZXR1cm4gZGF5anMudW5peChpdGVtLm5hbWUpLmZvcm1hdCh0aGlzLnNlbGVjdG9yLmZvcm1hdCk7CiAgICAgIH0pOwogICAgICBjb25zdCBjb2xvciA9IHRoaXMudGhlbWUgPT09ICJsaWdodCIgPyAiYmxhY2siIDogIndoaXRlIjsKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICJheGlzIgogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgbGVmdDogNTAgKiByYXRlLAogICAgICAgICAgcmlnaHQ6IDUwICogcmF0ZQogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBsZWZ0OiAzMCAqIHJhdGUsCiAgICAgICAgICBzZWxlY3RlZE1vZGU6IGZhbHNlLAogICAgICAgICAgZGF0YTogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogbWluZXIsCiAgICAgICAgICAgICAgaWNvbjogImNpcmNsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6IHJld2FyZCwKICAgICAgICAgICAgICBpY29uOiAiY2lyY2xlIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGZvbnRTaXplOiAxMiAqIHJhdGUsCiAgICAgICAgICAgIGNvbG9yCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB4QXhpczogewogICAgICAgICAgdHlwZTogImNhdGVnb3J5IiwKICAgICAgICAgIGJvdW5kYXJ5R2FwOiB0cnVlLAogICAgICAgICAgZGF0YTogeERhdGEsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgICBjb2xvcgogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXJnaW46IDIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogWwogICAgICAgICAgewogICAgICAgICAgICB0eXBlOiAidmFsdWUiLAogICAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJkYXNoZWQiLAogICAgICAgICAgICAgICAgY29sb3I6IHNwbGl0TGluZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICAgIGZvcm1hdHRlcih2KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyQ29udmVyc2lvbih2KTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgICAgIGNvbG9yCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICB0eXBlOiAidmFsdWUiLAogICAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJkYXNoZWQiLAogICAgICAgICAgICAgICAgY29sb3I6IHNwbGl0TGluZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgICAgIGNvbG9yCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBzZXJpZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogbWluZXIsCiAgICAgICAgICAgIHR5cGU6ICJiYXIiLAogICAgICAgICAgICB5QXhpc0luZGV4OiAxLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogc2VyaWVzSXRlbVswXQogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhOiBjb3VudExpc3QKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6IHJld2FyZCwKICAgICAgICAgICAgdHlwZTogImxpbmUiLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogc2VyaWVzSXRlbVsxXQogICAgICAgICAgICB9LAogICAgICAgICAgICBzeW1ib2w6ICJub25lIiwKICAgICAgICAgICAgc21vb3RoOiB0cnVlLAogICAgICAgICAgICBkYXRhOiByZXdhcmRMaXN0CiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9OwogICAgICBjaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICBoYW5kbGVUaW1lQ2hhbmdlKHYpIHsKICAgICAgdGhpcy5zZWxlY3RvciA9IHY7CiAgICB9LAogICAgYXN5bmMgZ2V0Q3VtdWxhdGl2ZUJsb2NrKCkgewogICAgICB0cnkgewogICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgICAgY29uc3QgeyB0aW1lX2RpZmYsIHJlcGVhdGVfdGltZSwgdGltZV9zdGFydCB9ID0gdGhpcy5zZWxlY3RvcjsKICAgICAgICBsZXQgcmVzID0gYXdhaXQgZ2V0Q3VtdWxhdGl2ZUJsb2NrKHsKICAgICAgICAgIHRpbWVfc3RhcnQ6IHRpbWVfc3RhcnQgPT0gdW5kZWZpbmVkID8gdGhpcy5ub3cgLSA4NjQwMCA6IHRpbWVfc3RhcnQsCiAgICAgICAgICB0aW1lX2RpZmY6IHRpbWVfZGlmZiwKICAgICAgICAgIHJlcGVhdGU6IHJlcGVhdGVfdGltZQogICAgICAgIH0pOwogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgIGNvbnN0IHJld2FyZExpc3QgPSBbXTsKICAgICAgICBjb25zdCBjb3VudExpc3QgPSBbXTsKICAgICAgICByZXMuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgIGxldCBub3cgPSBkYXlqcyhkYXlqcygpLmZvcm1hdCgiWVlZWSBNTSBERCBISDptbSIpKS51bml4KCk7CiAgICAgICAgICBpZiAobm93ID49IGl0ZW0udGltZV9lbmQpIHsKICAgICAgICAgICAgcmV3YXJkTGlzdC5wdXNoKHsKICAgICAgICAgICAgICBuYW1lOiBpdGVtLnRpbWVfZW5kLAogICAgICAgICAgICAgIHZhbHVlOiBpdGVtLmJsb2Nrc19yZXdhcmQKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvdW50TGlzdC5wdXNoKHBhcnNlSW50KGl0ZW0ubWluZXJfY291bnQpKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLnJld2FyZExpc3QgPSBPYmplY3QuZnJlZXplKHJld2FyZExpc3QpOwogICAgICAgIHRoaXMuY291bnRMaXN0ID0gT2JqZWN0LmZyZWV6ZShjb3VudExpc3QpOwogICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIGNoYXJ0ID0gdGhpcy4kY2hhcnQuaW5pdCh0aGlzLiRyZWZzLmNoYXJ0KTsKICAgIHRoaXMuZ2V0Q3VtdWxhdGl2ZUJsb2NrKCk7CiAgfSwKICB3YXRjaDogewogICAgc2VsZWN0b3IoKSB7CiAgICAgIHRoaXMuZ2V0Q3VtdWxhdGl2ZUJsb2NrKCk7CiAgICB9LAogICAgdGhlbWUoKSB7CiAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["BlockRewardChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"BlockRewardChart.vue","sourceRoot":"src/views/stats/components/metrics","sourcesContent":["<template>\n  <div\n    class=\"block-reward-chart\"\n    v-loading=\"loading\"\n    element-loading-background=\"var(--board-bg-color)\"\n  >\n    <time-selector @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">{{\n        $t(\"stats.metrics.blockReward.title\")\n      }}</span>\n    </time-selector>\n    <div class=\"chart-con\" ref=\"chart\"></div>\n  </div>\n</template>\n<script>\nimport dayjs from \"dayjs\";\nimport { getCumulativeBlock } from \"@/api/token\";\nlet chart;\nexport default {\n  name: \"BlockRewardChart\",\n  data() {\n    return {\n      loading: false,\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      rewardList: [],\n      countList: []\n    };\n  },\n  methods: {\n    drawChart() {\n      const rate = this.rate;\n      const numberConversion = this.numberConversion;\n      const { splitLine, seriesItem } = this.chartTheme.blockReward;\n      const [miner, reward] = this.$t(\"chart.blockReward\");\n      const { rewardList, countList } = this;\n      const xData = rewardList.map(item => {\n        return dayjs.unix(item.name).format(this.selector.format);\n      });\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const option = {\n        tooltip: {\n          trigger: \"axis\"\n        },\n        grid: {\n          left: 50 * rate,\n          right: 50 * rate\n        },\n        legend: {\n          left: 30 * rate,\n          selectedMode: false,\n          data: [\n            {\n              name: miner,\n              icon: \"circle\"\n            },\n            {\n              name: reward,\n              icon: \"circle\"\n            }\n          ],\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: true,\n          data: xData,\n          axisLabel: {\n            textStyle: {\n              fontSize: 12 * rate,\n              color\n            },\n            margin: 20\n          }\n        },\n        yAxis: [\n          {\n            type: \"value\",\n            splitLine: {\n              lineStyle: {\n                type: \"dashed\",\n                color: splitLine\n              }\n            },\n            axisLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              formatter(v) {\n                return numberConversion(v);\n              },\n              textStyle: {\n                fontSize: 12 * rate,\n                color\n              }\n            }\n          },\n          {\n            type: \"value\",\n            splitLine: {\n              lineStyle: {\n                type: \"dashed\",\n                color: splitLine\n              }\n            },\n            axisLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              textStyle: {\n                fontSize: 12 * rate,\n                color\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: miner,\n            type: \"bar\",\n            yAxisIndex: 1,\n            itemStyle: {\n              color: seriesItem[0]\n            },\n            data: countList\n          },\n          {\n            name: reward,\n            type: \"line\",\n            itemStyle: {\n              color: seriesItem[1]\n            },\n            symbol: \"none\",\n            smooth: true,\n            data: rewardList\n          }\n        ]\n      };\n      chart.setOption(option);\n    },\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    async getCumulativeBlock() {\n      try {\n        this.loading = true;\n        const { time_diff, repeate_time, time_start } = this.selector;\n        let res = await getCumulativeBlock({\n          time_start: time_start == undefined ? this.now - 86400 : time_start,\n          time_diff: time_diff,\n          repeate: repeate_time\n        });\n        this.loading = false;\n        const rewardList = [];\n        const countList = [];\n        res.forEach(item => {\n          let now = dayjs(dayjs().format(\"YYYY MM DD HH:mm\")).unix();\n          if (now >= item.time_end) {\n            rewardList.push({\n              name: item.time_end,\n              value: item.blocks_reward\n            });\n            countList.push(parseInt(item.miner_count));\n          }\n        });\n        this.rewardList = Object.freeze(rewardList);\n        this.countList = Object.freeze(countList);\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.chart);\n    this.getCumulativeBlock();\n  },\n  watch: {\n    selector() {\n      this.getCumulativeBlock();\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.block-reward-chart {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  box-shadow: 0px 1px 7px 9px rgba(0, 0, 0, 0.03);\n  .title {\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  .chart-con {\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    .chart-con {\n      height: 200px;\n    }\n    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.03);\n    border-radius: 10px;\n  }\n}\n</style>\n"]}]}