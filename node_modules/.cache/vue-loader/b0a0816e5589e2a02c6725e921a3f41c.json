{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/home/components/table/MessageTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/home/components/table/MessageTable.vue","mtime":1613722984206},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldExhdGVzdE1lc3NhZ2UgfSBmcm9tICJAL2FwaS9ob21lIjsKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICJ2dWV4IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNZXNzYWdlVGFibGUiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtZXNzYWdlVGFibGU6IHsKICAgICAgICBkYXRhU291cmNlOiBbXSwKICAgICAgICBjb2x1bW5zOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleTogImlkIiwKICAgICAgICAgICAgdGFyZ2V0OiAibWVzc2FnZS9kZXRhaWwiLAogICAgICAgICAgICBwYXJhbUtleTogImNpZCIsCiAgICAgICAgICAgIGlzTGluazogdHJ1ZSwKICAgICAgICAgICAgZWxsaXBzaXM6IHRydWUKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleTogInRpbWUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBrZXk6ICJmcm9tIiwKICAgICAgICAgICAgaXNMaW5rOiB0cnVlLAogICAgICAgICAgICB0YXJnZXQ6ICJhZGRyZXNzL2RldGFpbCIsCiAgICAgICAgICAgIHBhcmFtS2V5OiAiYWRkcmVzcyIsCiAgICAgICAgICAgIGVsbGlwc2lzOiB0cnVlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBrZXk6ICJ0byIsCiAgICAgICAgICAgIGlzTGluazogdHJ1ZSwKICAgICAgICAgICAgdGFyZ2V0OiAiYWRkcmVzcy9kZXRhaWwiLAogICAgICAgICAgICBwYXJhbUtleTogImFkZHJlc3MiLAogICAgICAgICAgICBlbGxpcHNpczogdHJ1ZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAga2V5OiAidmFsdWUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBsb2FkQ291bnQ6IDAsCiAgICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgICAgYXBwZW5kOiBmYWxzZSwKICAgICAgICB0aW1lcjogbnVsbAogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgaW5pdE1lc1RpbWVyKCkgewogICAgICB0aGlzLm1lc3NhZ2VUYWJsZS50aW1lciA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICB0aGlzLm1lc3NhZ2VUYWJsZS5kYXRhU291cmNlID0gdGhpcy5tZXNzYWdlVGFibGUuZGF0YVNvdXJjZS5tYXAoCiAgICAgICAgICBpdGVtID0+IHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAuLi5pdGVtLAogICAgICAgICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShpdGVtLm9yaWdpblRpbWUsIGl0ZW0uY3VycmVudCksCiAgICAgICAgICAgICAgY3VycmVudDogaXRlbS5jdXJyZW50ICsgMTAwMAogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICk7CiAgICAgIH0sIDEwMDApOwogICAgfSwKICAgIGFzeW5jIGdldE1lc3NhZ2VEYXRhKG51bSkgewogICAgICBpZiAobnVtID4gMzApIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5tZXNzYWdlVGFibGUubG9hZGluZyA9IHRydWU7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldExhdGVzdE1lc3NhZ2UobnVtKTsKCiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IGRhdGEubXNnLm1hcChpdGVtID0+IHsKICAgICAgICAgIGNvbnN0IHsgZnJvbSwgdG8sIHZhbHVlIH0gPSBpdGVtLm1zZzsKICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICAgIGNvbnN0IHJlYWxUaW1lID0KICAgICAgICAgICAgaXRlbS5tc2djcmVhdGUgPiBjdXJyZW50IC8gMTAwMCA/IGN1cnJlbnQgLyAxMDAwIDogaXRlbS5tc2djcmVhdGU7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ2YWx1ZToiLCkKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGZyb20sCiAgICAgICAgICAgIHRvLAogICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShyZWFsVGltZSksCiAgICAgICAgICAgIG9yaWdpblRpbWU6IHJlYWxUaW1lLAogICAgICAgICAgICBjdXJyZW50OiBjdXJyZW50LAogICAgICAgICAgICBpZDogaXRlbS5jaWQKICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5tZXNzYWdlVGFibGUuZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7CiAgICAgICAgdGhpcy5tZXNzYWdlVGFibGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRoaXMubWVzc2FnZVRhYmxlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGxvYWRNZXNzYWdlRGF0YSgpIHsKICAgICAgaWYgKHRoaXMubWVzc2FnZVRhYmxlLmxvYWRpbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMubWVzc2FnZVRhYmxlLmxvYWRDb3VudCA9PSAzKSB7CiAgICAgICAgdGhpcy5tZXNzYWdlVGFibGUuYXBwZW5kID0gdHJ1ZTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLm1lc3NhZ2VUYWJsZS50aW1lcik7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMubWVzc2FnZVRhYmxlLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgYXdhaXQgdGhpcy5nZXRNZXNzYWdlRGF0YSgxMCAqICh0aGlzLm1lc3NhZ2VUYWJsZS5sb2FkQ291bnQgKyAxKSk7CiAgICAgICAgICB0aGlzLm1lc3NhZ2VUYWJsZS5sb2FkQ291bnQrKzsKICAgICAgICAgIHRoaXMubWVzc2FnZVRhYmxlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuaW5pdE1lc1RpbWVyKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKGUpIHsKICAgICAgICAgICAgdGhpcy5tZXNzYWdlVGFibGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGFzeW5jIGxhdGVzdEJsb2NrSGVpZ2h0KCkgewogICAgICBpZiAodGhpcy5sb2FkQ291bnQgPT09IDEpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLm1lc3NhZ2VUYWJsZS50aW1lcik7CiAgICAgIGF3YWl0IHRoaXMuZ2V0TWVzc2FnZURhdGEodGhpcy5tZXNzYWdlVGFibGUubG9hZENvdW50ICogMTApOwogICAgICB0aGlzLmluaXRNZXNUaW1lcigpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKFsicmF0ZSJdKQogIH0sCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy5tZXNzYWdlVGFibGUudGltZXIpOwogIH0KfTsK"},{"version":3,"sources":["MessageTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"MessageTable.vue","sourceRoot":"src/views/home/components/table","sourcesContent":["<template>\n  <div class=\"message-table\">\n    <base-table\n      :dataSource=\"messageTable.dataSource\"\n      :columns=\"messageTable.columns\"\n      :loadMore=\"true\"\n      @load=\"loadMessageData\"\n      :showLoading=\"messageTable.loading\"\n      :showAppend=\"messageTable.append && !isMobile\"\n      :max-height=\"isMobile ? 200 : 400 * rate\"\n      @click-append=\"goTo('messageList')\"\n      :labels=\"$t('home.messageTable.label')\"\n      radius\n    ></base-table>\n  </div>\n</template>\n<script>\nimport { getLatestMessage } from \"@/api/home\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"MessageTable\",\n  data() {\n    return {\n      messageTable: {\n        dataSource: [],\n        columns: [\n          {\n            key: \"id\",\n            target: \"message/detail\",\n            paramKey: \"cid\",\n            isLink: true,\n            ellipsis: true\n          },\n          {\n            key: \"time\"\n          },\n          {\n            key: \"from\",\n            isLink: true,\n            target: \"address/detail\",\n            paramKey: \"address\",\n            ellipsis: true\n          },\n          {\n            key: \"to\",\n            isLink: true,\n            target: \"address/detail\",\n            paramKey: \"address\",\n            ellipsis: true\n          },\n          {\n            key: \"value\"\n          }\n        ],\n        loadCount: 0,\n        loading: false,\n        append: false,\n        timer: null\n      }\n    };\n  },\n  methods: {\n    initMesTimer() {\n      this.messageTable.timer = setInterval(() => {\n        this.messageTable.dataSource = this.messageTable.dataSource.map(\n          item => {\n            return {\n              ...item,\n              time: this.formatTime(item.originTime, item.current),\n              current: item.current + 1000\n            };\n          }\n        );\n      }, 1000);\n    },\n    async getMessageData(num) {\n      if (num > 30) {\n        return;\n      }\n      this.messageTable.loading = true;\n      try {\n        const data = await getLatestMessage(num);\n\n        const dataSource = data.msg.map(item => {\n          const { from, to, value } = item.msg;\n          const current = new Date().getTime();\n          const realTime =\n            item.msgcreate > current / 1000 ? current / 1000 : item.msgcreate;\n            console.log(\"value:\",)\n          return {\n            from,\n            to,\n            value: value,\n            time: this.formatTime(realTime),\n            originTime: realTime,\n            current: current,\n            id: item.cid\n          };\n        });\n        this.messageTable.dataSource = dataSource;\n        this.messageTable.loading = false;\n        return Promise.resolve();\n      } catch (e) {\n        this.messageTable.loading = false;\n      }\n    },\n    async loadMessageData() {\n      if (this.messageTable.loading) {\n        return;\n      }\n      if (this.messageTable.loadCount == 3) {\n        this.messageTable.append = true;\n        return;\n      } else {\n        clearInterval(this.messageTable.timer);\n        try {\n          this.messageTable.loading = true;\n          await this.getMessageData(10 * (this.messageTable.loadCount + 1));\n          this.messageTable.loadCount++;\n          this.messageTable.loading = false;\n          this.initMesTimer();\n        } catch (e) {\n          if (e) {\n            this.messageTable.loading = false;\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    async latestBlockHeight() {\n      if (this.loadCount === 1) {\n        return;\n      }\n      clearInterval(this.messageTable.timer);\n      await this.getMessageData(this.messageTable.loadCount * 10);\n      this.initMesTimer();\n    }\n  },\n  computed: {\n    ...mapState([\"rate\"])\n  },\n  beforeDestroy() {\n    clearInterval(this.messageTable.timer);\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.message-table {\n  div {\n    background: var(--main-bg-color);\n  }\n}\n</style>\n"]}]}