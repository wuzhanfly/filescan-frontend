{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/components/MessageList.vue?vue&type=style&index=0&id=7218dcc5&lang=scss&scoped=true&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/components/MessageList.vue","mtime":1613726343780},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tZXNzYWdlLWxpc3QgewogIC50b3RhbC1udW1iZXIgewogICAgaGVpZ2h0OiA4MHB4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIHBhZGRpbmc6IDAgMTAwcHg7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYmFja2dyb3VuZDogdmFyKC0tYm9hcmQtYmctY29sb3IpOwogICAgY29sb3I6IHZhcigtLW1haW4tdGV4dC1jb2xvcik7CiAgICAmIDo6di1kZWVwID4gc3BhbiB7CiAgICAgIG1hcmdpbi1yaWdodDogYXV0bzsKICAgICAgaSB7CiAgICAgICAgY29sb3I6IHZhcigtLWxpbmstY29sb3IpOwogICAgICAgIGZvbnQtc2l6ZTogMjJweDsKICAgICAgfQogICAgfQogICAgLmVsLWRyb3Bkb3duLWxpbmsgewogICAgICBjb2xvcjogd2hpdGU7CiAgICB9CiAgfQogIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgewogICAgLnRvdGFsLW51bWJlciB7CiAgICAgIGhlaWdodDogMzBweDsKICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDsKICAgICAgJiA6OnYtZGVlcCAuZWwtc2VsZWN0IGlucHV0IHsKICAgICAgICBoZWlnaHQ6IDIwcHg7CiAgICAgICAgZm9udC1zaXplOiAxMnB4ICFpbXBvcnRhbnQ7CiAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICB9CiAgICAgICYgOjp2LWRlZXAgLmVsLWlucHV0X19zdWZmaXggewogICAgICAgIGkgewogICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7CiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDsKICAgICAgICAgICYuaXMtcmV2ZXJzZSB7CiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["MessageList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MessageList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    class=\"message-list\"\n    v-loading=\"loading\"\n    element-loading-background=\"var(--board-bg-color)\"\n  >\n    <div class=\"total-number border-bottom\" slot=\"header\">\n      <span\n        v-html=\"$t('component.mesList.total', { total: formatNumber(total) })\"\n      ></span>\n      <el-select\n        v-model=\"option.method\"\n        @change=\"handleMethodChange\"\n        :placeholder=\"$t('component.mesList.placeholder')\"\n      >\n        <el-option label=\"All Method\" value=\"\" />\n        <el-option\n          v-for=\"item in method\"\n          :key=\"item.label\"\n          :label=\"item.label\"\n          :value=\"item.value\"\n        ></el-option>\n      </el-select>\n    </div>\n    <div class=\"table-con\" v-if=\"!isMobile\">\n      <base-table\n        :dataSource=\"messageData\"\n        :columns=\"columns\"\n        showPagination\n        :total=\"total\"\n        @size-change=\"handleSizeChange\"\n        @page-change=\"handlePageChange\"\n        :labels=\"labels\"\n        :currentPage=\"currentPage\"\n      ></base-table>\n    </div>\n    <mb-board\n      v-for=\"(item, index) in messageData\"\n      :key=\"item.cid + index\"\n      :dataSource=\"item\"\n      :columns=\"mbColumns\"\n      v-else\n    />\n    <mb-page v-if=\"isMobile\" @page-change=\"handlePageChange\" :total=\"total\" />\n  </div>\n</template>\n<script>\nimport {\n  getMessage,\n  getMessageByAddress,\n  getMessageMethods\n} from \"@/api/message\";\nexport default {\n  name: \"MessageList\",\n  data() {\n    const type = this.type;\n    return {\n      method: [],\n      loading: false,\n      option: {\n        method: \"\",\n        begindex: \"0\",\n        count: \"25\"\n      },\n      currentPage: 1,\n      total: 0,\n      messageData: [],\n      columns: [\n        {\n          key: \"type\",\n          hideInMobile: true\n        },\n        {\n          key: \"cid\",\n          isLink: true,\n          target: \"message/detail\",\n          ellipsis: true\n        },\n        {\n          key: \"height\",\n          isLink: true,\n          target: \"tipset\",\n          paramKey: \"height\"\n        },\n        {\n          key: \"time\",\n          hideInMobile: true\n        },\n        {\n          key: \"from\",\n          isLink: true,\n          target: \"address/detail\",\n          paramKey: \"address\",\n          ellipsis: true,\n          isComponent: type === \"address\"\n        },\n        {\n          key: \"to\",\n          isLink: true,\n          target: \"address/detail\",\n          paramKey: \"address\",\n          ellipsis: true,\n          isComponent: type === \"address\"\n        },\n        {\n          key: \"value\"\n        },\n        // {\n        //   key: \"fee\",\n        //   hideInMobile: true,\n        //   unit: \"FIL\"\n        // },\n        {\n          key: \"code\",\n          hideInMobile: true\n        },\n        {\n          key: \"method\"\n        }\n      ],\n      labels: []\n    };\n  },\n  props: {\n    withType: {\n      type: Boolean,\n      default: true\n    },\n    cid: {\n      type: String,\n      default: \"\"\n    },\n    type: {\n      type: String,\n      default: \"block\"\n    },\n    address: {\n      type: String,\n      default: \"\"\n    }\n  },\n  methods: {\n    handleSizeChange(v) {\n      this.option.count = v;\n    },\n    handlePageChange(v) {\n      this.currentPage = v;\n      this.option.begindex = (v - 1) * this.option.count;\n    },\n    handleMethodChange(v) {\n      this.currentPage = 1;\n      this.option = {\n        method: v,\n        begindex: 0,\n        count: 25\n      };\n    },\n    async getMessage() {\n      try {\n        this.loading = true;\n        const addressHash = this.address;\n        const type = this.type;\n        const ellipsisByLength = this.ellipsisByLength;\n        if (this.cid) {\n          this.option.block_cid = this.cid;\n        }\n        let data = {};\n        if (this.type === \"block\") {\n          data = await getMessage(this.option);\n        } else {\n          this.columns;\n          const res = await getMessageByAddress({\n            ...this.option,\n            address: this.address,\n            from_to: \"\"\n          });\n          data.msgs = res.data;\n          data.total = res.total;\n        }\n        this.total = Number(data.total);\n        const messageData = data.msgs.map(item => {\n          const { cid, msgcreate, msg, height, method_name, exit_code } = item;\n          const { from, to, value, gasprice } = msg;\n          let res = {\n            cid: cid,\n            time: this.formatTime(msgcreate),\n            from: {\n              render() {\n                return from !== addressHash ? (\n                  <a\n                    href={`./#/address/detail?address=${from}`}\n                    style={{ color: \"var(--link-color)\" }}\n                  >\n                    {ellipsisByLength(from, 6, true)}\n                  </a>\n                ) : (\n                  <span>{ellipsisByLength(from, 6, true)}</span>\n                );\n              }\n            },\n            to: {\n              render() {\n                return to !== addressHash ? (\n                  <a\n                    href={`./#/address/detail?address=${to}`}\n                    style={{ color: \"var(--link-color)\" }}\n                  >\n                    {ellipsisByLength(to, 6, true)}\n                  </a>\n                ) : (\n                  <span>{ellipsisByLength(to, 6, true)}</span>\n                );\n              }\n            },\n            // value: this.formatFilNumber(value),\n            value,\n          \n            fee: gasprice,\n            type: this.address !== from ? \"in\" : \"out\",\n            method: method_name,\n            height: this.formatNumber(height),\n            code: exit_code\n          };\n          if (type === \"block\") {\n            res.from = from;\n            res.to = to;\n          }\n          return res;\n        });\n        this.messageData = Object.freeze(messageData);\n        this.loading = false;\n      } catch (e) {\n        this.loading = false;\n      }\n    },\n    async getMessageMethods() {\n      try {\n        let data = await getMessageMethods();\n        this.method = data.method.map(item => {\n          return {\n            value: item,\n            label: item\n          };\n        });\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  watch: {\n    option: {\n      deep: true,\n      handler() {\n        this.getMessage();\n      }\n    },\n    cid() {\n      this.option = {\n        begindex: 0,\n        count: 25\n      };\n    },\n    address() {\n      this.getMessage();\n    }\n  },\n  mounted() {\n    this.labels = [...this.$t(\"component.mesList.label\")];\n    if (!this.withType) {\n      this.columns.shift();\n      this.labels.shift();\n    }\n    this.getMessage();\n    this.getMessageMethods();\n  },\n  computed: {\n    mbColumns() {\n      return this.columns\n        .map((item, index) => {\n          return {\n            ...item,\n            title: this.labels[index]\n          };\n        })\n        .filter(item => {\n          return !item.hideInMobile;\n        });\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.message-list {\n  .total-number {\n    height: 80px;\n    align-items: center;\n    padding: 0 100px;\n    display: flex;\n    background: var(--board-bg-color);\n    color: var(--main-text-color);\n    & ::v-deep > span {\n      margin-right: auto;\n      i {\n        color: var(--link-color);\n        font-size: 22px;\n      }\n    }\n    .el-dropdown-link {\n      color: white;\n    }\n  }\n  @media (max-width: 768px) {\n    .total-number {\n      height: 30px;\n      margin-bottom: 10px;\n      & ::v-deep .el-select input {\n        height: 20px;\n        font-size: 12px !important;\n        width: 100px;\n      }\n      & ::v-deep .el-input__suffix {\n        i {\n          line-height: 20px;\n          padding-left: 5px;\n          &.is-reverse {\n            padding-right: 10px;\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n<style lang=\"scss\">\n@media (max-width: 768px) {\n  .el-select-dropdown {\n    z-index: 10000 !important;\n    .el-select-dropdown__wrap {\n      max-height: 160px !important;\n    }\n    li {\n      height: 20px !important;\n      line-height: 20px !important;\n      font-size: 12px;\n    }\n  }\n}\n</style>\n"]}]}