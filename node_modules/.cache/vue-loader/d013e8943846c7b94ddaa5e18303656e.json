{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue?vue&type=style&index=0&id=0d59ee39&lang=scss&scoped=true&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hY3RpdmUtbWluZXIgewogIGJhY2tncm91bmQ6IHZhcigtLWJvYXJkLWJnLWNvbG9yKTsKICBib3JkZXItcmFkaXVzOiA4cHg7CiAgYm94LXNoYWRvdzogMHB4IDFweCA3cHggOXB4IHJnYmEoMCwgMCwgMCwgMC4wMyk7CiAgLmxpbmUtY2hhcnQgewogICAgaGVpZ2h0OiA1MDBweDsKICB9CiAgLnRpdGxlIHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgZm9udC1zaXplOiAyMHB4OwogICAgY29sb3I6IHZhcigtLW1haW4tdGV4dC1jb2xvcik7CiAgfQogIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgewogICAgLmxpbmUtY2hhcnQgewogICAgICBoZWlnaHQ6IDIwMHB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["ActiveMiner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveMiner.vue","sourceRoot":"src/views/stats/components/mining","sourcesContent":["<template>\n  <div class=\"active-miner bottom-20\">\n    <time-selector title=\"Total Storage Miners\" @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">{{\n        $t(\"stats.mining.activeMiner.title\")\n      }}</span>\n    </time-selector>\n    <div\n      class=\"line-chart\"\n      ref=\"line\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    ></div>\n  </div>\n</template>\n<script>\nimport { getActiveMinerCount } from \"@/api/stats\";\nlet chart;\nimport dayjs from \"dayjs\";\nexport default {\n  name: \"ActiveMiner\",\n  data() {\n    return {\n      counts: [],\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      loading: false\n    };\n  },\n  methods: {\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    drawChart() {\n      const rate = this.rate;\n      const { area, seriesItem, splitLine } = this.chartTheme.activeMiner;\n      const countLabel = this.$t(\"stats.mining.activeMiner.count\");\n      const data = this.counts;\n      const xData = data.map(item => {\n        return dayjs.unix(item.name).format(this.selector.format);\n      });\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const option = {\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            margin: 20,\n            color\n          },\n          axisTick: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            color\n          },\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLine\n            }\n          }\n        },\n        legend: {\n          selectedMode: false,\n          data: [{ name: countLabel }],\n          icon: \"circle\",\n          left: 50 * rate,\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          show: false,\n          left: 50 * rate,\n          right: 20 * rate\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        series: [\n          {\n            data: data,\n            type: \"line\",\n            smooth: true,\n            symbol: \"none\",\n            name: countLabel,\n            itemStyle: {\n              color: seriesItem\n            },\n            areaStyle: {\n              color: area\n            }\n          }\n        ]\n      };\n      chart.setOption(option);\n    },\n    async getActiveMinerCount() {\n      try {\n        const { time_diff, repeate_time } = this.selector;\n        this.loading = true;\n        let res = await getActiveMinerCount({\n          time_at: this.now,\n          time_diff,\n          repeate_time\n        });\n        const data = res.map(item => {\n          return {\n            name: item.time_at,\n            value: item.count\n          };\n        });\n        this.counts = Object.freeze(data.reverse());\n        this.loading = false;\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.line);\n    this.getActiveMinerCount();\n  },\n  watch: {\n    selector() {\n      this.getActiveMinerCount();\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.active-miner {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  box-shadow: 0px 1px 7px 9px rgba(0, 0, 0, 0.03);\n  .line-chart {\n    height: 500px;\n  }\n  .title {\n    font-weight: bold;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  @media (max-width: 768px) {\n    .line-chart {\n      height: 200px;\n    }\n  }\n}\n</style>\n"]}]}