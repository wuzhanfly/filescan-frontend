{"remainingRequest":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/wuzhanfly/git/filscan-frontend/src/views/stats/components/mining/ActiveMiner.vue","mtime":1612684657988},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/wuzhanfly/git/filscan-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldEFjdGl2ZU1pbmVyQ291bnQgfSBmcm9tICJAL2FwaS9zdGF0cyI7CmxldCBjaGFydDsKaW1wb3J0IGRheWpzIGZyb20gImRheWpzIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBY3RpdmVNaW5lciIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvdW50czogW10sCiAgICAgIHNlbGVjdG9yOiB7CiAgICAgICAgdGltZV9kaWZmOiAzNjAwLAogICAgICAgIHJlcGVhdGVfdGltZTogMjQsCiAgICAgICAgZm9ybWF0OiAiTU1NIERvIEhIOm1tIgogICAgICB9LAogICAgICBsb2FkaW5nOiBmYWxzZQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGhhbmRsZVRpbWVDaGFuZ2UodikgewogICAgICB0aGlzLnNlbGVjdG9yID0gdjsKICAgIH0sCiAgICBkcmF3Q2hhcnQoKSB7CiAgICAgIGNvbnN0IHJhdGUgPSB0aGlzLnJhdGU7CiAgICAgIGNvbnN0IHsgYXJlYSwgc2VyaWVzSXRlbSwgc3BsaXRMaW5lIH0gPSB0aGlzLmNoYXJ0VGhlbWUuYWN0aXZlTWluZXI7CiAgICAgIGNvbnN0IGNvdW50TGFiZWwgPSB0aGlzLiR0KCJzdGF0cy5taW5pbmcuYWN0aXZlTWluZXIuY291bnQiKTsKICAgICAgY29uc3QgZGF0YSA9IHRoaXMuY291bnRzOwogICAgICBjb25zdCB4RGF0YSA9IGRhdGEubWFwKGl0ZW0gPT4gewogICAgICAgIHJldHVybiBkYXlqcy51bml4KGl0ZW0ubmFtZSkuZm9ybWF0KHRoaXMuc2VsZWN0b3IuZm9ybWF0KTsKICAgICAgfSk7CiAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy50aGVtZSA9PT0gImxpZ2h0IiA/ICJibGFjayIgOiAid2hpdGUiOwogICAgICBjb25zdCBvcHRpb24gPSB7CiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIHR5cGU6ICJjYXRlZ29yeSIsCiAgICAgICAgICBib3VuZGFyeUdhcDogZmFsc2UsCiAgICAgICAgICBkYXRhOiB4RGF0YSwKICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICBmb250U2l6ZTogMTIgKiByYXRlLAogICAgICAgICAgICBtYXJnaW46IDIwLAogICAgICAgICAgICBjb2xvcgogICAgICAgICAgfSwKICAgICAgICAgIGF4aXNUaWNrOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogInZhbHVlIiwKICAgICAgICAgIGF4aXNMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgYXhpc1RpY2s6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgY29sb3IKICAgICAgICAgIH0sCiAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgICAgdHlwZTogImRhc2hlZCIsCiAgICAgICAgICAgICAgY29sb3I6IHNwbGl0TGluZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgIHNlbGVjdGVkTW9kZTogZmFsc2UsCiAgICAgICAgICBkYXRhOiBbeyBuYW1lOiBjb3VudExhYmVsIH1dLAogICAgICAgICAgaWNvbjogImNpcmNsZSIsCiAgICAgICAgICBsZWZ0OiA1MCAqIHJhdGUsCiAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgZm9udFNpemU6IDEyICogcmF0ZSwKICAgICAgICAgICAgY29sb3IKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgbGVmdDogNTAgKiByYXRlLAogICAgICAgICAgcmlnaHQ6IDIwICogcmF0ZQogICAgICAgIH0sCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogImF4aXMiCiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgdHlwZTogImxpbmUiLAogICAgICAgICAgICBzbW9vdGg6IHRydWUsCiAgICAgICAgICAgIHN5bWJvbDogIm5vbmUiLAogICAgICAgICAgICBuYW1lOiBjb3VudExhYmVsLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogc2VyaWVzSXRlbQogICAgICAgICAgICB9LAogICAgICAgICAgICBhcmVhU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogYXJlYQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9OwogICAgICBjaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICBhc3luYyBnZXRBY3RpdmVNaW5lckNvdW50KCkgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHsgdGltZV9kaWZmLCByZXBlYXRlX3RpbWUgfSA9IHRoaXMuc2VsZWN0b3I7CiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICBsZXQgcmVzID0gYXdhaXQgZ2V0QWN0aXZlTWluZXJDb3VudCh7CiAgICAgICAgICB0aW1lX2F0OiB0aGlzLm5vdywKICAgICAgICAgIHRpbWVfZGlmZiwKICAgICAgICAgIHJlcGVhdGVfdGltZQogICAgICAgIH0pOwogICAgICAgIGNvbnN0IGRhdGEgPSByZXMubWFwKGl0ZW0gPT4gewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbmFtZTogaXRlbS50aW1lX2F0LAogICAgICAgICAgICB2YWx1ZTogaXRlbS5jb3VudAogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLmNvdW50cyA9IE9iamVjdC5mcmVlemUoZGF0YS5yZXZlcnNlKCkpOwogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIGNoYXJ0ID0gdGhpcy4kY2hhcnQuaW5pdCh0aGlzLiRyZWZzLmxpbmUpOwogICAgdGhpcy5nZXRBY3RpdmVNaW5lckNvdW50KCk7CiAgfSwKICB3YXRjaDogewogICAgc2VsZWN0b3IoKSB7CiAgICAgIHRoaXMuZ2V0QWN0aXZlTWluZXJDb3VudCgpOwogICAgfSwKICAgIHRoZW1lKCkgewogICAgICB0aGlzLmRyYXdDaGFydCgpOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["ActiveMiner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"ActiveMiner.vue","sourceRoot":"src/views/stats/components/mining","sourcesContent":["<template>\n  <div class=\"active-miner bottom-20\">\n    <time-selector title=\"Total Storage Miners\" @time-select=\"handleTimeChange\">\n      <span slot=\"left\" class=\"title\">{{\n        $t(\"stats.mining.activeMiner.title\")\n      }}</span>\n    </time-selector>\n    <div\n      class=\"line-chart\"\n      ref=\"line\"\n      v-loading=\"loading\"\n      element-loading-background=\"var(--board-bg-color)\"\n    ></div>\n  </div>\n</template>\n<script>\nimport { getActiveMinerCount } from \"@/api/stats\";\nlet chart;\nimport dayjs from \"dayjs\";\nexport default {\n  name: \"ActiveMiner\",\n  data() {\n    return {\n      counts: [],\n      selector: {\n        time_diff: 3600,\n        repeate_time: 24,\n        format: \"MMM Do HH:mm\"\n      },\n      loading: false\n    };\n  },\n  methods: {\n    handleTimeChange(v) {\n      this.selector = v;\n    },\n    drawChart() {\n      const rate = this.rate;\n      const { area, seriesItem, splitLine } = this.chartTheme.activeMiner;\n      const countLabel = this.$t(\"stats.mining.activeMiner.count\");\n      const data = this.counts;\n      const xData = data.map(item => {\n        return dayjs.unix(item.name).format(this.selector.format);\n      });\n      const color = this.theme === \"light\" ? \"black\" : \"white\";\n      const option = {\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: xData,\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            margin: 20,\n            color\n          },\n          axisTick: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            fontSize: 12 * rate,\n            color\n          },\n          splitLine: {\n            lineStyle: {\n              type: \"dashed\",\n              color: splitLine\n            }\n          }\n        },\n        legend: {\n          selectedMode: false,\n          data: [{ name: countLabel }],\n          icon: \"circle\",\n          left: 50 * rate,\n          textStyle: {\n            fontSize: 12 * rate,\n            color\n          }\n        },\n        grid: {\n          show: false,\n          left: 50 * rate,\n          right: 20 * rate\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        series: [\n          {\n            data: data,\n            type: \"line\",\n            smooth: true,\n            symbol: \"none\",\n            name: countLabel,\n            itemStyle: {\n              color: seriesItem\n            },\n            areaStyle: {\n              color: area\n            }\n          }\n        ]\n      };\n      chart.setOption(option);\n    },\n    async getActiveMinerCount() {\n      try {\n        const { time_diff, repeate_time } = this.selector;\n        this.loading = true;\n        let res = await getActiveMinerCount({\n          time_at: this.now,\n          time_diff,\n          repeate_time\n        });\n        const data = res.map(item => {\n          return {\n            name: item.time_at,\n            value: item.count\n          };\n        });\n        this.counts = Object.freeze(data.reverse());\n        this.loading = false;\n        this.drawChart();\n      } catch (e) {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    chart = this.$chart.init(this.$refs.line);\n    this.getActiveMinerCount();\n  },\n  watch: {\n    selector() {\n      this.getActiveMinerCount();\n    },\n    theme() {\n      this.drawChart();\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.active-miner {\n  background: var(--board-bg-color);\n  border-radius: 8px;\n  box-shadow: 0px 1px 7px 9px rgba(0, 0, 0, 0.03);\n  .line-chart {\n    height: 500px;\n  }\n  .title {\n    font-weight: bold;\n    font-size: 20px;\n    color: var(--main-text-color);\n  }\n  @media (max-width: 768px) {\n    .line-chart {\n      height: 200px;\n    }\n  }\n}\n</style>\n"]}]}